//#define OldCode
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
//using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Globalization;
using System.IO;
using System.Xml;

namespace UIRibbonTools
{
    public class VBCodeBuilder : AbstractCodeBuilder
    {
        protected override void SetStreamWriter(string path)
        {
            //if (!Settings.Instance.RibbonFramework) 
                sw = File.CreateText(Path.Combine(path, ribbonItemsClass + ".Designer.vb"));
            //else
            //    sw = File.CreateText(Path.Combine(path, ribbonItemsClass + ".g.vb"));
        }

        protected override void WriteHeader()
        {
            sw.WriteLine("'------------------------------------------------------------------------------");
            sw.WriteLine("' <auto-generated>");
            sw.WriteLine("'     This code was generated by a tool.");
            sw.WriteLine("'     Runtime Version:");
            sw.WriteLine("'");
            sw.WriteLine("'     Changes to this file may cause incorrect behavior and will be lost if");
            sw.WriteLine("'     the code is regenerated.");
            sw.WriteLine("' </auto-generated>");
            sw.WriteLine("'------------------------------------------------------------------------------");
            sw.WriteLine();
            sw.WriteLine("Imports System");
            if (!Settings.Instance.RibbonFramework)
            {
                sw.WriteLine("Imports RibbonLib");
                sw.WriteLine("Imports RibbonLib.Controls");
                sw.WriteLine();
                sw.WriteLine("Namespace RibbonLib.Controls");
            }
            else
            {
                sw.WriteLine();
                sw.WriteLine("Namespace WinForms.Ribbon");
            }
            //sw.WriteLine("{");
            sw.WriteLine(Indent(1) + "Partial Class " + ribbonItemsClass);
            //sw.WriteLine(Ident(1) + "{");
        }

        protected override void WriteConst()
        {
            if (!hasHFile)
            {
                sw.WriteLine("' Warning: *.h file does not exist. The commands maybe incomplete !!!");
                sw.WriteLine();
            }
            sw.WriteLine(Indent(2) + "Private Class Cmd");
            //sw.WriteLine(Ident(2) + "{");
#if OldCode
            for (int i = 0; i < pair3List.Count; i++)
            {
                sw.WriteLine(Ident(3) + "Public Const " + pair3List[i].Key + " As UInteger" + " = " + pair3List[i].Value);
            }
            for (int i = 0; i < pair1List.Count; i++)
            {
                sw.WriteLine(Ident(3) + "Public Const " + pair1List[i].Key + " As UInteger" + " = " + pair1List[i].Value);
            }
#else
            for (int i = 0; i < ribbonItems.Count; i++)
            {
                RibbonItem ribbonItem = ribbonItems[i];
                if (ribbonItem.IsContextPopup)
                    popupRibbonItems.Add(ribbonItem);
                sw.WriteLine(Indent(3) + "Public Const " + ribbonItem.CommandName + " As UInteger" + " = " + ribbonItem.CommandId.ToString(CultureInfo.InvariantCulture));
            }
#endif
            if (_qatCustomizeCommand != null)
                sw.WriteLine(Indent(3) + "Public Const " + _qatCustomizeCommand.Value.Key + " As UInteger" + " = " + _qatCustomizeCommand.Value.Value.ToString(CultureInfo.InvariantCulture));
            sw.WriteLine(Indent(2) + "End Class");
            sw.WriteLine();
        }

        protected override void WritePopupConst()
        {
            sw.WriteLine(Indent(2) + "' ContextPopup CommandName");
            for (int i = 0; i < popupRibbonItems.Count; i++)
            {
                RibbonItem ribbonItem = popupRibbonItems[i];
                string name = ribbonItem.CommandName;
                if (!Char.IsNumber(name[0]))
                {
                    if (!string.IsNullOrEmpty(ribbonItem.Comment))
                        IntelliSenseComment(ribbonItem.Comment);
                    sw.WriteLine(Indent(2) + "Public Const " + name + " As UInteger" + " = Cmd." + name);
                }
                else
                    sw.WriteLine(Indent(2) + "// CommandId = " + name);
            }
            sw.WriteLine();
        }

        protected override void WriteProperties()
        {
            //sw.WriteLine(Indent(2) + "Private Shared initialized As Boolean");
            //sw.WriteLine();
            if (!Settings.Instance.RibbonFramework)
            {
                sw.WriteLine(Indent(2) + "Private " + "_ribbon" + " As Ribbon");
                sw.WriteLine(Indent(2) + "Public ReadOnly Property " + "Ribbon" + " As Ribbon");
            }
            else
            {
                sw.WriteLine(Indent(2) + "Private " + "_ribbon" + " As RibbonStrip");
                sw.WriteLine(Indent(2) + "Public ReadOnly Property " + "Ribbon" + " As RibbonStrip");
            }

            sw.WriteLine(Indent(3) + "Get");
            sw.WriteLine(Indent(4) + "Return _ribbon");
            sw.WriteLine(Indent(3) + "End Get");
            sw.WriteLine(Indent(2) + "End Property");
#if OldCode
            for (int i = 0; i < pair2List.Count; i++)
            {
                string name = GetPropertyName(pair2List[i].Key);
                if (Char.IsNumber(name[0]))
                    name = pair2List[i].Value.Substring("Ribbon".Length) + name;
                sw.WriteLine(Ident(2) + "Private " + "_" + name + " As " + pair2List[i].Value);
                sw.WriteLine(Ident(2) + "Public ReadOnly Property " + name + " As " + pair2List[i].Value);
                sw.WriteLine(Ident(3) + "Get");
                sw.WriteLine(Ident(4) + "Return _" + name);
                sw.WriteLine(Ident(3) + "End Get");
                sw.WriteLine(Ident(2) + "End Property");
            }
#else
            for (int i = 0; i < ribbonItems.Count; i++)
            {
                RibbonItem ribbonItem = ribbonItems[i];
                if (!(ribbonItem.IsContextPopup))
                {
                    string name = GetPropertyName(ribbonItem.CommandName);
                    sw.WriteLine(Indent(2) + "Private " + "_" + name + " As " + ribbonItem.RibbonClassName);
                    if (!string.IsNullOrEmpty(ribbonItem.Comment))
                        IntelliSenseComment(ribbonItem.Comment);
                    sw.WriteLine(Indent(2) + "Public ReadOnly Property " + name + " As " + ribbonItem.RibbonClassName);
                    sw.WriteLine(Indent(3) + "Get");
                    sw.WriteLine(Indent(4) + "Return _" + name);
                    sw.WriteLine(Indent(3) + "End Get");
                    sw.WriteLine(Indent(2) + "End Property");
                    //sw.WriteLine(Ident(2) + "public " + ribbonItem.RibbonClassName + " " + name + " { get; private set; }");
                }
            }
#endif
            sw.WriteLine();
        }

        protected override void WriteConstructor()
        {
            if (!Settings.Instance.RibbonFramework)
                sw.WriteLine(Indent(2) + "Public Sub New" + "(ByVal ribbon As Ribbon)");
            else
                sw.WriteLine(Indent(2) + "Public Sub New" + "(ByVal ribbon As RibbonStrip)");
            //sw.WriteLine(Ident(2) + "{");
            sw.WriteLine(Indent(3) + "If ribbon Is Nothing Then");
            sw.WriteLine(Indent(4) + "Throw New ArgumentNullException(NameOf(ribbon), \"Parameter is Nothing\")");
            sw.WriteLine(Indent(3) + "End If");
            //sw.WriteLine(Indent(3) + "If initialized Then");
            //sw.WriteLine(Indent(4) + "Return");
            //sw.WriteLine(Indent(3) + "End If");
            sw.WriteLine(Indent(3) + "_ribbon = ribbon");
#if OldCode
            for (int i = 0; i < pair2List.Count; i++)
            {
                string name = GetPropertyName(pair2List[i].Key);
                if (!Char.IsNumber(name[0]))
                    sw.WriteLine(Ident(3) + "_" + name + " = New " + pair2List[i].Value + "(_ribbon, " + "Cmd." + pair2List[i].Key + ")");
                else
                {
                    string identifier = pair2List[i].Value.Substring("Ribbon".Length) + name;
                    sw.WriteLine(Ident(3) + "_" + identifier + " = New " + pair2List[i].Value + "(_ribbon, " + pair2List[i].Key + ");");
                }
            }
#else
            for (int i = 0; i < ribbonItems.Count; i++)
            {
                RibbonItem ribbonItem = ribbonItems[i];
                if (!(ribbonItem.IsContextPopup))
                {
                    string name = GetPropertyName(ribbonItem.CommandName);

                    if (ribbonItem.RibbonClassName.Equals("RibbonQuickAccessToolbar") && _qatCustomizeCommand != null)
                        sw.WriteLine(Indent(3) + "_" + name + " = New " + ribbonItem.RibbonClassName + "(_ribbon, " + "Cmd." + ribbonItem.CommandName + ", " + "Cmd." + _qatCustomizeCommand.Value.Key + ")");
                    else
                        sw.WriteLine(Indent(3) + "_" + name + " = New " + ribbonItem.RibbonClassName + "(_ribbon, " + "Cmd." + ribbonItem.CommandName + ")");
                }
            }
#endif
            //sw.WriteLine(Indent(3) + "initialized = True");
            sw.WriteLine(Indent(2) + "End Sub");
            sw.WriteLine();
        }

        protected override void CloseCodeFile()
        {
            sw.WriteLine(Indent(1) + "End Class");
            sw.WriteLine("End Namespace");
            sw.Close();
        }

        private void IntelliSenseComment(string comment)
        {
            sw.WriteLine(Indent(2) + "''' <summary>");
            sw.WriteLine(Indent(2) + "''' " + comment);
            sw.WriteLine(Indent(2) + "''' </summary>");
        }
    }
}
